{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { db } from '../../Firebase';\nimport { setLoading } from './alertStore';\nexport const initialState = {\n  ingredients: [],\n  ingredientTitre: {\n    nom: \"\",\n    titre: true,\n    subArray: []\n  },\n  ingredient: {\n    nom: \"\",\n    prix: \"\",\n    qte: \"\",\n    titre: false\n  }\n};\nconst ingredientSlice = createSlice({\n  name: \"ingredients\",\n  initialState,\n  reducers: {\n    addIngredientTitre: (state, {\n      payload\n    }) => {\n      state.ingredients = [...state.ingredients, payload];\n    },\n    addIngredientSubArray: (state, {\n      payload\n    }) => {\n      state.ingredientTitre = { ...state.ingredientTitre,\n        subArray: [...state.ingredientTitre.subArray, payload]\n      };\n    },\n    updateIngredientTitre: (state, {\n      payload\n    }) => {\n      state.ingredients = state.ingredients.map(item => item.ingredientTitreId === payload.ingredientTitreId ? payload : item);\n    },\n    selectIngredient: (state, {\n      payload\n    }) => {\n      state.ingredient = payload;\n    },\n    selectIngredientTtitre: (state, {\n      payload\n    }) => {\n      state.ingredientTitre = payload;\n    },\n    getIngredients: (state, {\n      payload\n    }) => {\n      state.ingredients = payload;\n    },\n    deleteIngredientTitre: (state, {\n      payload\n    }) => {\n      state.ingredients = state.ingredients.filter(item => item.ingredientTitreId !== payload);\n    }\n  }\n});\nexport const createIngredientTitre = payload => async dispatch => {\n  try {\n    const ingredientTitre = await db.collection('ingredientsTitre').add({\n      nom: payload.nom,\n      titre: payload.titre,\n      subArray: payload.subArray,\n      ficheId: payload.ficheId,\n      created: payload.created\n    });\n    await db.collection('ingredientsTitre').doc(ingredientTitre.id).update({\n      ingredientTitreId: ingredientTitre.id\n    });\n    const ingredientTitreSaved = await db.collection('ingredientsTitre').doc(ingredientTitre.id).get();\n    dispatch(addIngredientTitre(ingredientTitreSaved.data()));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createIngredient = payload => async dispatch => {\n  try {\n    const ingredient = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').add({\n      nom: payload.nom,\n      qte: payload.qte,\n      prix: payload.prix,\n      titre: payload.titre,\n      ingredientTitreId: payload.ingredientTitreId,\n      created: payload.created\n    });\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(ingredient.id).update({\n      ingredientId: ingredient.id\n    });\n    const ingredientSaved = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(ingredient.id).get();\n    dispatch(addIngredientToSubArray(ingredientSaved.data()));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const addIngredientToSubArray = payload => async dispatch => {\n  try {\n    const ingredientTitre = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).get();\n    let arr = await ingredientTitre.data().subArray;\n    await arr.push(payload);\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).update({\n      subArray: arr\n    });\n    dispatch(getAndPatchIngredientTitre(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeIngredientTitre = payload => async dispatch => {\n  try {\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).delete();\n    dispatch(removeAllIngredients(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeAllIngredients = payload => async dispatch => {\n  try {\n    const ingredients = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').where(\"ingredientTitreId\", \"==\", payload.ingredientTitreId).get();\n    ingredients.forEach(async (ingredient) => await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(ingredient.data().ingredientId).delete());\n    dispatch(deleteIngredientTitre(payload.ingredientTitreId));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeIngredient = payload => async dispatch => {\n  try {\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(payload.ingredientId).delete();\n    dispatch(updateSubArray(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAndPatchIngredientTitre = payload => async dispatch => {\n  try {\n    const ingredientTitreSaved = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).get();\n    dispatch(updateIngredientTitre(ingredientTitreSaved.data()));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateSubArray = payload => async dispatch => {\n  let arr = [];\n\n  try {\n    const ingredients = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').where('ingredientTitreId', \"==\", payload.ingredientTitreId).get();\n    ingredients.forEach(ingre => {\n      arr.push(ingre.data());\n    });\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).update({\n      subArray: arr\n    });\n    dispatch(getAndPatchIngredientTitre(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchIngredient = payload => async dispatch => {\n  try {\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(payload.ingredientId).update({\n      nom: payload.nom,\n      qte: payload.qte,\n      prix: payload.prix\n    });\n    dispatch(updateSubArray(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchIngredientTitre = payload => async dispatch => {\n  try {\n    await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).update({\n      nom: payload.nom\n    });\n    const ingredientTitreUpdated = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).get();\n    dispatch(updateIngredientTitre(ingredientTitreUpdated.data()));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchIngredients = payload => async dispatch => {\n  dispatch(setLoading(true));\n  let arr = [];\n\n  try {\n    const ingredients = await db.collection('ingredientsTitre').where(\"ficheId\", \"==\", payload).get();\n\n    if (ingredients.empty) {\n      console.log(\"no ingredients\");\n    } else {\n      ingredients.forEach(ingredient => {\n        arr.push(ingredient.data());\n      });\n    }\n\n    dispatch(getIngredients(arr));\n    dispatch(setLoading(false));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const {\n  getIngredients,\n  addIngredientTitre,\n  addIngredientSubArray,\n  updateIngredientTitre,\n  selectIngredient,\n  selectIngredientTtitre,\n  deleteIngredientTitre\n} = ingredientSlice.actions;\nexport const ingredientSelector = state => state.ingredientStore.ingredient;\nexport const ingredientsSelector = state => state.ingredientStore.ingredients;\nexport const ingredientTitreSelector = state => state.ingredientStore.ingredientTitre;\nexport default ingredientSlice.reducer;","map":{"version":3,"sources":["/Users/raffihaycan/cook-app/src/Store/modules/ingredientStore.js"],"names":["createSlice","db","setLoading","initialState","ingredients","ingredientTitre","nom","titre","subArray","ingredient","prix","qte","ingredientSlice","name","reducers","addIngredientTitre","state","payload","addIngredientSubArray","updateIngredientTitre","map","item","ingredientTitreId","selectIngredient","selectIngredientTtitre","getIngredients","deleteIngredientTitre","filter","createIngredientTitre","dispatch","collection","add","ficheId","created","doc","id","update","ingredientTitreSaved","get","data","error","console","log","createIngredient","ingredientId","ingredientSaved","addIngredientToSubArray","arr","push","getAndPatchIngredientTitre","removeIngredientTitre","delete","removeAllIngredients","where","forEach","removeIngredient","updateSubArray","ingre","patchIngredient","patchIngredientTitre","ingredientTitreUpdated","fetchIngredients","empty","actions","ingredientSelector","ingredientStore","ingredientsSelector","ingredientTitreSelector","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\nimport {db} from '../../Firebase'\nimport {setLoading} from './alertStore'\n\n\nexport const initialState = {\n\n    ingredients : [],\n\n    ingredientTitre : {nom:\"\", titre:true, subArray:[]},\n\n    ingredient : {nom:\"\",prix:\"\",qte :\"\", titre :false},\n}\n\nconst ingredientSlice = createSlice({\n\n    name:\"ingredients\",\n\n    initialState,\n\n    reducers:{\n\n        addIngredientTitre :(state,{payload}) => { state.ingredients = [...state.ingredients,payload]},\n\n        addIngredientSubArray:(state,{payload}) => {state.ingredientTitre = {...state.ingredientTitre,subArray:[...state.ingredientTitre.subArray,payload]}},\n\n        updateIngredientTitre:(state,{payload}) => {state.ingredients = state.ingredients.map(item => item.ingredientTitreId === payload.ingredientTitreId ? payload : item)},\n\n        selectIngredient:(state,{payload}) => { state.ingredient = payload},\n\n        selectIngredientTtitre:(state,{payload}) => {state.ingredientTitre = payload},\n\n        getIngredients:(state,{payload}) => {state.ingredients = payload},\n\n        deleteIngredientTitre:(state,{payload}) => {state.ingredients = state.ingredients.filter(item => item.ingredientTitreId !== payload)}\n\n    }\n})\n\nexport const createIngredientTitre = (payload) => async dispatch => {\n\n    try {\n\n        const ingredientTitre = await db.collection('ingredientsTitre').add({nom:payload.nom,titre:payload.titre,subArray:payload.subArray,ficheId:payload.ficheId,created:payload.created})\n      \n        await db.collection('ingredientsTitre').doc(ingredientTitre.id).update({ingredientTitreId:ingredientTitre.id})\n        \n        const ingredientTitreSaved = await db.collection('ingredientsTitre').doc(ingredientTitre.id).get()\n\n        dispatch(addIngredientTitre(ingredientTitreSaved.data()))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const createIngredient = (payload) => async dispatch => {\n\n    try {\n\n        const ingredient = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').add({\n\n            nom:payload.nom,\n            qte:payload.qte,\n            prix:payload.prix,\n            titre:payload.titre,\n            ingredientTitreId:payload.ingredientTitreId,\n            created:payload.created\n        })\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(ingredient.id).update({ingredientId:ingredient.id})\n\n        const ingredientSaved = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(ingredient.id).get();\n\n       dispatch(addIngredientToSubArray(ingredientSaved.data()))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}   \n\nexport const addIngredientToSubArray = (payload) => async dispatch => {\n\n    try {\n        \n        const ingredientTitre = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).get()\n\n        let arr = await ingredientTitre.data().subArray\n\n        await arr.push(payload)\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).update({subArray:arr})\n\n        dispatch(getAndPatchIngredientTitre(payload))\n       \n    } catch (error) {\n        \n        console.log(error)\n    }\n\n}\n\nexport const removeIngredientTitre = (payload) =>  async dispatch => {\n\n    try {\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).delete()\n\n        dispatch(removeAllIngredients(payload))\n        \n    } catch (error) {\n        \n        console.log(error)\n    }\n}   \n\nexport const removeAllIngredients = (payload) => async dispatch => {\n\n    try {\n\n        const ingredients = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').where(\"ingredientTitreId\",\"==\", payload.ingredientTitreId).get()\n\n        ingredients.forEach( async ingredient =>\n            \n            await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(ingredient.data().ingredientId).delete()\n        )\n\n       dispatch(deleteIngredientTitre(payload.ingredientTitreId)) \n    \n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const removeIngredient = (payload) => async dispatch => {\n\n    try {\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(payload.ingredientId).delete()\n\n        dispatch(updateSubArray(payload))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const getAndPatchIngredientTitre = (payload) => async dispatch => {\n\n    try {\n\n        const ingredientTitreSaved = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).get()\n       \n        dispatch(updateIngredientTitre(ingredientTitreSaved.data()))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const updateSubArray = (payload) => async dispatch => {\n\n    let arr = [];\n\n    try {\n\n        const ingredients = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').where('ingredientTitreId',\"==\",payload.ingredientTitreId).get()\n\n        ingredients.forEach(ingre => {\n\n            arr.push(ingre.data())\n        })\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).update({subArray: arr})\n\n        dispatch(getAndPatchIngredientTitre(payload))\n        \n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const patchIngredient = (payload) => async dispatch => {\n\n    try {\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).collection('ingredients').doc(payload.ingredientId).update({nom:payload.nom,qte:payload.qte,prix:payload.prix})\n\n        dispatch(updateSubArray(payload))\n        \n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const patchIngredientTitre = (payload) => async dispatch => {\n\n    try {\n\n        await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).update({nom:payload.nom})\n\n        const ingredientTitreUpdated = await db.collection('ingredientsTitre').doc(payload.ingredientTitreId).get()\n\n        dispatch(updateIngredientTitre(ingredientTitreUpdated.data()))\n        \n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const fetchIngredients = (payload) => async dispatch => {\n\n    dispatch(setLoading(true))\n\n    let arr = [];\n\n    try {\n\n        const ingredients = await db.collection('ingredientsTitre').where(\"ficheId\",\"==\",payload).get()\n\n        if(ingredients.empty){\n\n            console.log(\"no ingredients\")\n\n        } else {\n\n            ingredients.forEach(ingredient => {\n\n                arr.push(ingredient.data())\n            })\n        }\n\n        dispatch(getIngredients(arr))\n\n        dispatch(setLoading(false))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\n\nexport const {getIngredients,addIngredientTitre,addIngredientSubArray,updateIngredientTitre,selectIngredient,\n    selectIngredientTtitre,deleteIngredientTitre} = ingredientSlice.actions;\n\nexport const ingredientSelector = (state) => state.ingredientStore.ingredient;\nexport const ingredientsSelector = (state) => state.ingredientStore.ingredients;\nexport const ingredientTitreSelector = (state) => state.ingredientStore.ingredientTitre;\n\n\nexport default ingredientSlice.reducer"]},"metadata":{},"sourceType":"module"}