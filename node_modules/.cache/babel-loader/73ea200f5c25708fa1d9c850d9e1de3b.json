{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { db } from '../../Firebase';\nexport const initialStateProgress = {\n  progressions: [],\n  progressTitre: {\n    nom: \"\",\n    titre: true,\n    numero: \"\",\n    subArray: []\n  },\n  progress: {\n    nom: \"\",\n    titre: false\n  }\n};\nconst proregressionSlice = createSlice({\n  name: \"progression\",\n  initialState: initialStateProgress,\n  reducers: {\n    getProgressions: (state, {\n      payload\n    }) => {\n      state.progressions = payload;\n    },\n    addProgressTitre: (state, {\n      payload\n    }) => {\n      state.progressions = [...state.progressions, payload];\n    },\n    selectProgressTitre: (state, {\n      payload\n    }) => {\n      state.progressTitre = payload;\n    },\n    selectProgress: (state, {\n      payload\n    }) => {\n      state.progress = payload;\n    },\n    updateProgressTitre: (state, {\n      payload\n    }) => {\n      state.progressions = state.progressions.map(item => item.progressTitreId === payload.progressTitreId ? payload : item);\n    },\n    deleteProgressTitre: (state, {\n      payload\n    }) => {\n      state.progressions = state.progressions.filter(item => item.progressTitreId !== payload.progressTitreId);\n    },\n    addProgressToSubArray: (state, {\n      payload\n    }) => {\n      state.progressTitre = { ...state.progressTitre,\n        subArray: [...state.progressTitre.subArray, payload]\n      };\n    }\n  }\n});\nexport const createProgressionTitre = payload => async dispatch => {\n  try {\n    const progressTitre = await db.collection('progressTitre').add({\n      nom: payload.nom,\n      titre: payload.titre,\n      ficheId: payload.ficheId,\n      numero: payload.numero,\n      subArray: payload.subArray\n    });\n    await db.collection('progressTitre').doc(progressTitre.id).update({\n      progressTitreId: progressTitre.id\n    });\n    const progressTitreSaved = await db.collection('progressTitre').doc(progressTitre.id).get();\n    dispatch(addProgressTitre(progressTitreSaved.data()));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createProgression = payload => async dispatch => {\n  try {\n    const progres = await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').add({\n      nom: payload.nom,\n      titre: payload.titre,\n      progressTitreId: payload.progressTitreId\n    });\n    await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(progres.id).update({\n      progressId: progres.id\n    });\n    dispatch(updateSubArray(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateSubArray = payload => async dispatch => {\n  let arr = [];\n\n  try {\n    const progress = await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').where(\"progressTitreId\", '==', payload.progressTitreId).get();\n    progress.forEach(progr => arr.push(progr.data()));\n    await db.collection('progressTitre').doc(payload.progressTitreId).update({\n      subArray: arr\n    });\n    dispatch(getAndPatchProgressTitre(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getAndPatchProgressTitre = payload => async dispatch => {\n  try {\n    const progressTitreUpdated = await db.collection(\"progressTitre\").doc(payload.progressTitreId).get();\n    dispatch(updateProgressTitre(progressTitreUpdated.data()));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeProgression = payload => async dispatch => {\n  try {\n    await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(payload.progressId).delete();\n    dispatch(updateSubArray(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeProgressionTitre = payload => async dispatch => {\n  try {\n    const progress = await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').where('progressTitreId', \"==\", payload.progressTitreId).get();\n    progress.forEach(async progr => {\n      await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(progr.data().progressId).delete();\n    });\n    await db.collection('progressTitre').doc(payload.progressTitreId).delete();\n    dispatch(deleteProgressTitre(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchProgression = payload => async dispatch => {\n  try {\n    await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(payload.progressId).update({\n      nom: payload.nom\n    });\n    dispatch(updateSubArray(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchProgressionTitre = payload => async dispatch => {\n  try {\n    await db.collection('progressTitre').doc(payload.progressTitreId).update({\n      nom: payload.nom,\n      numero: payload.numero\n    });\n    dispatch(updateProgressTitre(payload));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchProgressions = payload => async dispatch => {\n  let arr = [];\n\n  try {\n    const progressions = await db.collection('progressTitre').where(\"ficheId\", '==', payload).get();\n\n    if (progressions.empty) {\n      console.log(\"no progressions\");\n    } else {\n      progressions.forEach(prog => {\n        arr.push(prog.data());\n      });\n    }\n\n    dispatch(getProgressions(arr));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const {\n  getProgressions,\n  addProgressToSubArray,\n  addProgressTitre,\n  selectProgressTitre,\n  selectProgress,\n  updateProgressTitre,\n  deleteProgressTitre\n} = proregressionSlice.actions;\nexport const progressTitreSelector = state => state.progressionStore.progressTitre;\nexport const progressSelector = state => state.progressionStore.progress;\nexport const progresssionsSelector = state => state.progressionStore.progressions;\nexport default proregressionSlice.reducer;","map":{"version":3,"sources":["/Users/raffihaycan/cook-app/src/Store/modules/progressionStore.js"],"names":["createSlice","db","initialStateProgress","progressions","progressTitre","nom","titre","numero","subArray","progress","proregressionSlice","name","initialState","reducers","getProgressions","state","payload","addProgressTitre","selectProgressTitre","selectProgress","updateProgressTitre","map","item","progressTitreId","deleteProgressTitre","filter","addProgressToSubArray","createProgressionTitre","dispatch","collection","add","ficheId","doc","id","update","progressTitreSaved","get","data","error","console","log","createProgression","progres","progressId","updateSubArray","arr","where","forEach","progr","push","getAndPatchProgressTitre","progressTitreUpdated","removeProgression","delete","removeProgressionTitre","patchProgression","patchProgressionTitre","fetchProgressions","empty","prog","actions","progressTitreSelector","progressionStore","progressSelector","progresssionsSelector","reducer"],"mappings":"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","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\nimport {db} from '../../Firebase'\n\n\nexport const initialStateProgress = { \n\n    progressions : [], \n\n    progressTitre : {nom:\"\", titre: true, numero:\"\", subArray:[]},\n    \n    progress: {nom:\"\",titre:false}\n}\n\nconst proregressionSlice = createSlice({\n\n    name:\"progression\",\n\n    initialState : initialStateProgress,\n\n    reducers:{\n\n        getProgressions:(state,{payload}) => {state.progressions = payload},\n\n        addProgressTitre:(state,{payload}) => {state.progressions = [...state.progressions,payload]},\n\n        selectProgressTitre:(state,{payload}) => {state.progressTitre = payload},\n\n        selectProgress:(state,{payload}) => {state.progress = payload},\n\n        updateProgressTitre:(state,{payload}) => {state.progressions = state.progressions.map(item => item.progressTitreId === payload.progressTitreId ? payload : item)},\n\n        deleteProgressTitre:(state,{payload}) => {state.progressions = state.progressions.filter(item => item.progressTitreId !== payload.progressTitreId)},\n\n        addProgressToSubArray:(state,{payload}) => {state.progressTitre = {...state.progressTitre,subArray:[...state.progressTitre.subArray,payload]}}\n    }\n})\n\n\nexport const createProgressionTitre = (payload) => async dispatch => {\n\n    try {\n\n        const progressTitre = await db.collection('progressTitre').add({nom:payload.nom,titre:payload.titre,ficheId:payload.ficheId,numero:payload.numero,subArray:payload.subArray})\n        \n        await db.collection('progressTitre').doc(progressTitre.id).update({progressTitreId:progressTitre.id})\n\n        const progressTitreSaved = await db.collection('progressTitre').doc(progressTitre.id).get()\n\n        dispatch(addProgressTitre(progressTitreSaved.data()))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n\n}\n\n\nexport const createProgression = (payload) => async dispatch => {\n\n    try {\n\n        const progres = await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').add({nom:payload.nom,titre:payload.titre,progressTitreId:payload.progressTitreId});\n\n        await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(progres.id).update({progressId:progres.id})\n        \n       dispatch(updateSubArray(payload))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const updateSubArray = (payload) => async dispatch => {\n\n    let arr = [];\n\n    try {\n\n        const progress = await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').where(\"progressTitreId\",'==',payload.progressTitreId).get()\n\n        progress.forEach(progr => arr.push(progr.data()))\n        \n        await db.collection('progressTitre').doc(payload.progressTitreId).update({subArray:arr})\n\n        dispatch(getAndPatchProgressTitre(payload))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\n\nexport const getAndPatchProgressTitre = (payload) => async dispatch => {\n\n    try {\n\n        const progressTitreUpdated = await db.collection(\"progressTitre\").doc(payload.progressTitreId).get()\n\n        dispatch(updateProgressTitre(progressTitreUpdated.data()))\n        \n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const removeProgression = (payload) => async dispatch => {\n\n    try {\n\n        await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(payload.progressId).delete()\n       \n        dispatch(updateSubArray(payload));\n\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const removeProgressionTitre = (payload) => async dispatch => {\n\n    try {\n\n        const progress = await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').where('progressTitreId',\"==\",payload.progressTitreId).get();\n\n        progress.forEach( async progr => {\n\n            await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(progr.data().progressId).delete()\n        })\n\n        await db.collection('progressTitre').doc(payload.progressTitreId).delete()\n\n        dispatch(deleteProgressTitre(payload))\n        \n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\n\nexport const patchProgression = (payload) => async dispatch => {\n\n    try {\n\n        await db.collection('progressTitre').doc(payload.progressTitreId).collection('progress').doc(payload.progressId).update({nom:payload.nom})\n        \n        dispatch(updateSubArray(payload))\n\n    } catch (error) {\n        \n        console.log(error)\n    }\n}\n\nexport const patchProgressionTitre = (payload) => async dispatch => {\n\n    try {\n\n        await db.collection('progressTitre').doc(payload.progressTitreId).update({nom:payload.nom,numero:payload.numero})\n\n        dispatch(updateProgressTitre(payload))\n        \n    } catch (error) {\n\n        console.log(error)\n    }\n}\n\nexport const fetchProgressions = (payload) => async dispatch => {\n\n    let arr = [];\n\n    try {\n\n        const progressions = await db.collection('progressTitre').where(\"ficheId\",'==',payload).get()\n\n        if(progressions.empty){\n\n            console.log(\"no progressions\")\n\n        } else {\n\n            progressions.forEach(prog => {\n\n                arr.push(prog.data())\n            })\n        }\n\n        dispatch(getProgressions(arr))\n        \n    } catch (error) {\n\n        console.log(error)\n    }\n}\n\n\nexport const {getProgressions,addProgressToSubArray,addProgressTitre,selectProgressTitre,selectProgress,updateProgressTitre,deleteProgressTitre} = proregressionSlice.actions;\n\nexport const progressTitreSelector = (state) => state.progressionStore.progressTitre;\nexport const progressSelector = (state) => state.progressionStore.progress;\nexport const progresssionsSelector = (state) => state.progressionStore.progressions;\n\n\nexport default proregressionSlice.reducer\n"]},"metadata":{},"sourceType":"module"}